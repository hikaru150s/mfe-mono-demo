"use strict";(self.webpackChunkshell=self.webpackChunkshell||[]).push([[40],{4497:(e,t,r)=>{r.r(t),r.d(t,{Auth:()=>Auth});class SessionStorageUnavailableException extends Error{constructor(){super("Session storage is not available."),this.name="SessionStorageUnavailableException",Object.setPrototypeOf(this,SessionStorageUnavailableException.prototype)}}class EmptyTokenException extends Error{constructor(){super("No token found"),this.name="NoTokenException",Object.setPrototypeOf(this,EmptyTokenException.prototype)}}var o=r(3254);class BaseDriver{decodeToken(e){return(0,o.decodeJwt)(e)}getTokenData(){try{return this.getTokenDataOrFail()}catch{return null}}getTokenDataOrFail(){const e=this.getToken();if(!e)throw new EmptyTokenException;return this.decodeToken(e).user}}class SessionStorageDriver extends BaseDriver{constructor(e=sessionStorage){if(super(),this.storage=e,!this.storage)throw new SessionStorageUnavailableException}setToken(e){this.storage.setItem(SessionStorageDriver.key,e)}getToken(){return this.storage.getItem(SessionStorageDriver.key)}clearToken(){this.storage.removeItem(SessionStorageDriver.key)}isTokenValid(){const e=this.getToken();if(!e)return!1;const{exp:t}=this.decodeToken(e);return void 0===t||t>Date.now()/1e3}}SessionStorageDriver.key="STG_TOKEN";class Auth{constructor(e=new SessionStorageDriver){this.driver=e}setToken(e){this.driver.setToken(e)}getToken(){return this.driver.getToken()}clearToken(){this.driver.clearToken()}isTokenValid(){return this.driver.isTokenValid()}getTokenData(){return this.driver.getTokenData()}}}}]);